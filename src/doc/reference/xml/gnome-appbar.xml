<refentry id="GnomeAppBar">
<refmeta>
<refentrytitle role="top_of_page" id="GnomeAppBar.top_of_page">GnomeAppBar</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGNOMEUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GnomeAppBar</refname>
<refpurpose>An application status and progress bar widget</refpurpose>
</refnamediv>

<refsynopsisdiv id="GnomeAppBar.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;libgnomeui/libgnomeui.h&gt;

#define             <link linkend="GNOME-APPBAR-HAS-STATUS--CAPS">GNOME_APPBAR_HAS_STATUS</link>             (appbar)
#define             <link linkend="GNOME-APPBAR-HAS-PROGRESS--CAPS">GNOME_APPBAR_HAS_PROGRESS</link>           (appbar)
#define             <link linkend="GNOME-APPBAR-INTERACTIVE--CAPS">GNOME_APPBAR_INTERACTIVE</link>            (ab)
                    <link linkend="GnomeAppBar-struct">GnomeAppBar</link>;
<link linkend="GtkWidget">GtkWidget</link>*          <link linkend="gnome-appbar-new">gnome_appbar_new</link>                    (<link linkend="gboolean">gboolean</link> has_progress,
                                                         <link linkend="gboolean">gboolean</link> has_status,
                                                         <link linkend="GnomePreferencesType">GnomePreferencesType</link> interactivity);
<link linkend="void">void</link>                <link linkend="gnome-appbar-set-status">gnome_appbar_set_status</link>             (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                         const <link linkend="gchar">gchar</link> *status);
<link linkend="GtkWidget">GtkWidget</link>*          <link linkend="gnome-appbar-get-status">gnome_appbar_get_status</link>             (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);
<link linkend="void">void</link>                <link linkend="gnome-appbar-set-default">gnome_appbar_set_default</link>            (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                         const <link linkend="gchar">gchar</link> *default_status);
<link linkend="void">void</link>                <link linkend="gnome-appbar-push">gnome_appbar_push</link>                   (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                         const <link linkend="gchar">gchar</link> *status);
<link linkend="void">void</link>                <link linkend="gnome-appbar-pop">gnome_appbar_pop</link>                    (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);
<link linkend="void">void</link>                <link linkend="gnome-appbar-clear-stack">gnome_appbar_clear_stack</link>            (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);
<link linkend="void">void</link>                <link linkend="gnome-appbar-set-progress-percentage">gnome_appbar_set_progress_percentage</link>
                                                        (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                         <link linkend="gfloat">gfloat</link> percentage);
<link linkend="GtkProgressBar">GtkProgressBar</link>*     <link linkend="gnome-appbar-get-progress">gnome_appbar_get_progress</link>           (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);
<link linkend="void">void</link>                <link linkend="gnome-appbar-refresh">gnome_appbar_refresh</link>                (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);
<link linkend="void">void</link>                <link linkend="gnome-appbar-set-prompt">gnome_appbar_set_prompt</link>             (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                         const <link linkend="gchar">gchar</link> *prompt,
                                                         <link linkend="gboolean">gboolean</link> modal);
<link linkend="void">void</link>                <link linkend="gnome-appbar-clear-prompt">gnome_appbar_clear_prompt</link>           (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);
<link linkend="gchar">gchar</link> *             <link linkend="gnome-appbar-get-response">gnome_appbar_get_response</link>           (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);
</synopsis>
</refsynopsisdiv>

<refsect1 id="GnomeAppBar.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="GInitiallyUnowned">GInitiallyUnowned</link>
         +----<link linkend="GtkObject">GtkObject</link>
               +----<link linkend="GtkWidget">GtkWidget</link>
                     +----<link linkend="GtkContainer">GtkContainer</link>
                           +----<link linkend="GtkBox">GtkBox</link>
                                 +----<link linkend="GtkHBox">GtkHBox</link>
                                       +----GnomeAppBar
</synopsis>
</refsect1>



<refsect1 id="GnomeAppBar.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
GnomeAppBar implements
 <link linkend="GtkBuildable">GtkBuildable</link>,  <link linkend="AtkImplementorIface">AtkImplementorIface</link> and  <link linkend="GtkOrientable">GtkOrientable</link>.</para>
</refsect1>


<refsect1 id="GnomeAppBar.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="GnomeAppBar--has-progress">has-progress</link>&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write / Construct
  &quot;<link linkend="GnomeAppBar--has-status">has-status</link>&quot;               <link linkend="gboolean">gboolean</link>              : Read / Write / Construct
  &quot;<link linkend="GnomeAppBar--interactivity">interactivity</link>&quot;            <link linkend="GnomePreferencesType">GnomePreferencesType</link>  : Read / Write / Construct
</synopsis>
</refsect1>

<refsect1 id="GnomeAppBar.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="GnomeAppBar-clear-prompt">clear-prompt</link>&quot;                                   : Run Last
  &quot;<link linkend="GnomeAppBar-user-response">user-response</link>&quot;                                  : Run Last
</synopsis>
</refsect1>


<refsect1 id="GnomeAppBar.description" role="desc">
<title role="desc.title">Description</title>
<para>
A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> widget sits (usually) at the bottom of an application window and
contains a progress bar (for indicating time consuming tasks and their
completion status) and/or a status bar for sending short one-line message to
the user. It is also possible (in theory) for the user to edit the contents of
the status bar, should the application developer choose to allow that, however
<emphasis>note that this is not really working</emphasis> in the present
implementation, so developers are recommended to avoid using interactive status
bars and use proper editable widgets instead.
</para>
</refsect1>

<refsect1 id="GnomeAppBar.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GNOME-APPBAR-HAS-STATUS--CAPS" role="macro">
<title>GNOME_APPBAR_HAS_STATUS()</title>
<indexterm zone="GNOME-APPBAR-HAS-STATUS--CAPS"><primary sortas="GNOME_APPBAR_HAS_STATUS">GNOME_APPBAR_HAS_STATUS</primary></indexterm><programlisting>#define GNOME_APPBAR_HAS_STATUS(appbar) (gnome_appbar_get_status(GNOME_APPBAR(appbar)) != NULL)
</programlisting>
<para>
Whether or not the application bar contains a status box.
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara>A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>%TRUE is a status box is contained in the appbar.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GNOME-APPBAR-HAS-PROGRESS--CAPS" role="macro">
<title>GNOME_APPBAR_HAS_PROGRESS()</title>
<indexterm zone="GNOME-APPBAR-HAS-PROGRESS--CAPS"><primary sortas="GNOME_APPBAR_HAS_PROGRESS">GNOME_APPBAR_HAS_PROGRESS</primary></indexterm><programlisting>#define GNOME_APPBAR_HAS_PROGRESS(appbar) (gnome_appbar_get_progress(GNOME_APPBAR(appbar)) != NULL)
</programlisting>
<para>
Whether or not the application bar contains a status box.
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara>A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>%TRUE is a status box is contained in the appbar.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GNOME-APPBAR-INTERACTIVE--CAPS" role="macro">
<title>GNOME_APPBAR_INTERACTIVE()</title>
<indexterm zone="GNOME-APPBAR-INTERACTIVE--CAPS"><primary sortas="GNOME_APPBAR_INTERACTIVE">GNOME_APPBAR_INTERACTIVE</primary></indexterm><programlisting>#define GNOME_APPBAR_INTERACTIVE(ab) ((ab) ? (ab)-&gt;interactive : FALSE)
</programlisting>
<para>
Whether or not the user can edit the text in the statusbar portion of a
<link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</para><variablelist role="params">
<varlistentry><term><parameter>ab</parameter>&#160;:</term>
<listitem><simpara>A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>%TRUE if the user can edit the statusbar text.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GnomeAppBar-struct" role="struct">
<title>GnomeAppBar</title>
<indexterm zone="GnomeAppBar-struct"><primary sortas="GnomeAppBar">GnomeAppBar</primary></indexterm><programlisting>typedef struct _GnomeAppBar GnomeAppBar;</programlisting>
<para>
This widget contains the status bar and progress bar (if they are requested).
After creating a <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> widget (via <link linkend="gnome-appbar-new"><function>gnome_appbar_new()</function></link>, for example), it
can then be passed to <link linkend="gnome-app-set-statusbar"><function>gnome_app_set_statusbar()</function></link> to add it to the main
application window.
</para></refsect2>
<refsect2 id="gnome-appbar-new" role="function">
<title>gnome_appbar_new ()</title>
<indexterm zone="gnome-appbar-new"><primary sortas="gnome_appbar_new">gnome_appbar_new</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*          gnome_appbar_new                    (<link linkend="gboolean">gboolean</link> has_progress,
                                                         <link linkend="gboolean">gboolean</link> has_status,
                                                         <link linkend="GnomePreferencesType">GnomePreferencesType</link> interactivity);</programlisting>
<para>
Create a new GNOME application status bar.  If <parameter>has_progress</parameter> is
<link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, a small progress bar widget will be created, and placed on the
left side of the appbar.  If <parameter>has_status</parameter> is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, a status bar,
possibly an editable one, is created.
</para>
<para>
The <parameter>interactivity</parameter> parameter determines whether the appbar is an interactive
"minibuffer" or just a status bar.  If it is set to
<link linkend="GNOME-PREFERENCES-NEVER--CAPS"><type>GNOME_PREFERENCES_NEVER</type></link>, it is never interactive.  If it is set to
<link linkend="GNOME-PREFERENCES-USER--CAPS"><type>GNOME_PREFERENCES_USER</type></link> we respect user preferences from
ui-properties. If it's <link linkend="GNOME-PREFERENCES-ALWAYS--CAPS"><type>GNOME_PREFERENCES_ALWAYS</type></link> we are interactive
whether the user likes it or not. Basically, if your app supports
both interactive and not (for example, if you use the
gnome-app-util interfaces), you should use
<link linkend="GNOME-PREFERENCES-USER--CAPS"><type>GNOME_PREFERENCES_USER</type></link>. Otherwise, use the setting you
support. Please note that "interactive" mode is not functional now;
GtkEntry is inadequate and so a custom widget will be written
eventually.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>has_progress</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if appbar needs progress bar widget, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if not.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>has_status</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if appbar needs status bar widget, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if not.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interactivity</parameter>&#160;:</term>
<listitem><simpara> Level of user activity required.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  Pointer to new <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> widget.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-set-status" role="function">
<title>gnome_appbar_set_status ()</title>
<indexterm zone="gnome-appbar-set-status"><primary sortas="gnome_appbar_set_status">gnome_appbar_set_status</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_appbar_set_status             (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                         const <link linkend="gchar">gchar</link> *status);</programlisting>
<para>
Sets the status label without changing widget state; next call to
<link linkend="gnome-appbar-set-status"><function>gnome_appbar_set_status()</function></link> or <link linkend="gnome-appbar-push"><function>gnome_appbar_push()</function></link> will destroy this
permanently.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> Text to which status label will be set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-get-status" role="function">
<title>gnome_appbar_get_status ()</title>
<indexterm zone="gnome-appbar-get-status"><primary sortas="gnome_appbar_get_status">gnome_appbar_get_status</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*          gnome_appbar_get_status             (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);</programlisting>
<para>
Retrieves the statusbar widget.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
A pointer to the statusbar widget.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-set-default" role="function">
<title>gnome_appbar_set_default ()</title>
<indexterm zone="gnome-appbar-set-default"><primary sortas="gnome_appbar_set_default">gnome_appbar_set_default</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_appbar_set_default            (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                         const <link linkend="gchar">gchar</link> *default_status);</programlisting>
<para>
What to show when showing nothing else is on the stack; defaults to the
empty string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>default_status</parameter>&#160;:</term>
<listitem><simpara> Text for status label.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-push" role="function">
<title>gnome_appbar_push ()</title>
<indexterm zone="gnome-appbar-push"><primary sortas="gnome_appbar_push">gnome_appbar_push</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_appbar_push                   (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                         const <link linkend="gchar">gchar</link> *status);</programlisting>
<para>
Push a new status message onto the status bar stack and display it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> Text of status message.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-pop" role="function">
<title>gnome_appbar_pop ()</title>
<indexterm zone="gnome-appbar-pop"><primary sortas="gnome_appbar_pop">gnome_appbar_pop</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_appbar_pop                    (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);</programlisting>
<para>
Remove current status message, and display previous status
message, if any.  It is fine to call this with an empty stack.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-clear-stack" role="function">
<title>gnome_appbar_clear_stack ()</title>
<indexterm zone="gnome-appbar-clear-stack"><primary sortas="gnome_appbar_clear_stack">gnome_appbar_clear_stack</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_appbar_clear_stack            (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);</programlisting>
<para>
Remove all status messages from <parameter>appbar</parameter>, and display default status
message (if present).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-set-progress-percentage" role="function">
<title>gnome_appbar_set_progress_percentage ()</title>
<indexterm zone="gnome-appbar-set-progress-percentage"><primary sortas="gnome_appbar_set_progress_percentage">gnome_appbar_set_progress_percentage</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_appbar_set_progress_percentage
                                                        (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                         <link linkend="gfloat">gfloat</link> percentage);</programlisting>
<para>
Sets progress bar to <parameter>percentage</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>percentage</parameter>&#160;:</term>
<listitem><simpara> Percentage to which progress bar should be set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-get-progress" role="function">
<title>gnome_appbar_get_progress ()</title>
<indexterm zone="gnome-appbar-get-progress"><primary sortas="gnome_appbar_get_progress">gnome_appbar_get_progress</primary></indexterm><programlisting><link linkend="GtkProgressBar">GtkProgressBar</link>*     gnome_appbar_get_progress           (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);</programlisting>
<para>
Retrieves the progress bar widget for further manipulation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GtkProgressBar"><type>GtkProgressBar</type></link> widget which is <parameter>appbar</parameter>'s progress bar, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
if <parameter>appbar</parameter> has no progress bar.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-refresh" role="function">
<title>gnome_appbar_refresh ()</title>
<indexterm zone="gnome-appbar-refresh"><primary sortas="gnome_appbar_refresh">gnome_appbar_refresh</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_appbar_refresh                (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);</programlisting>
<para>
Refresh the status message bar by redrawing the item on the top of the
stack, or the default value if the stack is empty.. Useful to force the
message from a previous call to <link linkend="gnome-appbar-set-status"><function>gnome_appbar_set_status()</function></link> to disappear.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-set-prompt" role="function">
<title>gnome_appbar_set_prompt ()</title>
<indexterm zone="gnome-appbar-set-prompt"><primary sortas="gnome_appbar_set_prompt">gnome_appbar_set_prompt</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_appbar_set_prompt             (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                         const <link linkend="gchar">gchar</link> *prompt,
                                                         <link linkend="gboolean">gboolean</link> modal);</programlisting>
<para>
Put a prompt in the appbar and wait for a response. When the
user responds or cancels, a 'user_response' signal is emitted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prompt</parameter>&#160;:</term>
<listitem><simpara> Text of the prompt message.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>modal</parameter>&#160;:</term>
<listitem><simpara> If <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, grabs input.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-clear-prompt" role="function">
<title>gnome_appbar_clear_prompt ()</title>
<indexterm zone="gnome-appbar-clear-prompt"><primary sortas="gnome_appbar_clear_prompt">gnome_appbar_clear_prompt</primary></indexterm><programlisting><link linkend="void">void</link>                gnome_appbar_clear_prompt           (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);</programlisting>
<para>
Remove any prompt from the status message bar.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnome-appbar-get-response" role="function">
<title>gnome_appbar_get_response ()</title>
<indexterm zone="gnome-appbar-get-response"><primary sortas="gnome_appbar_get_response">gnome_appbar_get_response</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             gnome_appbar_get_response           (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar);</programlisting>
<para>
Get the response to the prompt, if any.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GnomeAppBar"><type>GnomeAppBar</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
Text from <parameter>appbar</parameter> entry widget, as entered by user. This string should be
freed by the caller (using <link linkend="gfree"><function>gfree()</function></link>) when no longer required.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="GnomeAppBar.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GnomeAppBar--has-progress" role="property"><title>The <literal>&quot;has-progress&quot;</literal> property</title>
<indexterm zone="GnomeAppBar--has-progress"><primary sortas="GnomeAppBar:has-progress">GnomeAppBar:has-progress</primary></indexterm><programlisting>  &quot;has-progress&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write / Construct</programlisting>
<para>Create a progress widget.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GnomeAppBar--has-status" role="property"><title>The <literal>&quot;has-status&quot;</literal> property</title>
<indexterm zone="GnomeAppBar--has-status"><primary sortas="GnomeAppBar:has-status">GnomeAppBar:has-status</primary></indexterm><programlisting>  &quot;has-status&quot;               <link linkend="gboolean">gboolean</link>              : Read / Write / Construct</programlisting>
<para>Create a status widget.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GnomeAppBar--interactivity" role="property"><title>The <literal>&quot;interactivity&quot;</literal> property</title>
<indexterm zone="GnomeAppBar--interactivity"><primary sortas="GnomeAppBar:interactivity">GnomeAppBar:interactivity</primary></indexterm><programlisting>  &quot;interactivity&quot;            <link linkend="GnomePreferencesType">GnomePreferencesType</link>  : Read / Write / Construct</programlisting>
<para>Level of user activity required.</para><para>Default value: GNOME_PREFERENCES_NEVER</para>
</refsect2>
</refsect1>

<refsect1 id="GnomeAppBar.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="GnomeAppBar-clear-prompt" role="signal"><title>The <literal>&quot;clear-prompt&quot;</literal> signal</title>
<indexterm zone="GnomeAppBar-clear-prompt"><primary sortas="GnomeAppBar::clear-prompt">GnomeAppBar::clear-prompt</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GnomeAppBar-user-response" role="signal"><title>The <literal>&quot;user-response&quot;</literal> signal</title>
<indexterm zone="GnomeAppBar-user-response"><primary sortas="GnomeAppBar::user-response">GnomeAppBar::user-response</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GnomeAppBar">GnomeAppBar</link> *appbar,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>appbar</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
